// Generated by CIRCT firtool-1.62.0
module RX(
  input        clock,
               reset,
               io_rxPin,
               io_out_ready,
  output       io_out_valid,
  output [7:0] io_out_bits
);

  reg  [19:0] tickReg;
  reg  [7:0]  shiftReg;
  reg  [3:0]  bitCntReg;
  reg         readyReg;
  reg  [1:0]  stateReg;
  reg         cntReg;
  wire        io_out_valid_0 = ~(|bitCntReg) & readyReg;
  always @(posedge clock) begin
    if (reset) begin
      tickReg <= 20'h0;
      shiftReg <= 8'h0;
      bitCntReg <= 4'h0;
      readyReg <= 1'h0;
      stateReg <= 2'h0;
      cntReg <= 1'h1;
    end
    else begin
      automatic logic             _GEN = stateReg == 2'h0;
      automatic logic             _GEN_0;
      automatic logic             _GEN_1 = tickReg == 20'h0;
      automatic logic             _GEN_2 = stateReg == 2'h2;
      automatic logic             _GEN_3;
      automatic logic             _GEN_4;
      automatic logic [3:0][19:0] _GEN_5 =
        {{_GEN_1 ? 20'h1457 : tickReg - 20'h1},
         {_GEN_1 ? 20'h1457 : tickReg - 20'h1},
         {_GEN_1 ? 20'h1457 : tickReg - 20'h1},
         {20'h1E82}};
      automatic logic [3:0][1:0]  _GEN_6 =
        {{~((&stateReg) & _GEN_1) | cntReg ? stateReg : 2'h0},
         {~_GEN_1 | (|bitCntReg) ? stateReg : 2'h3},
         {_GEN_1 ? 2'h2 : stateReg},
         {io_rxPin ? stateReg : 2'h1}};
      _GEN_0 = stateReg == 2'h1;
      _GEN_3 = _GEN_2 & _GEN_1 & (|bitCntReg);
      _GEN_4 = _GEN | _GEN_0;
      tickReg <= _GEN_5[stateReg];
      if (_GEN_4 | ~_GEN_3) begin
      end
      else
        shiftReg <= {io_rxPin, shiftReg[7:1]};
      if (~_GEN) begin
        if (_GEN_0)
          bitCntReg <= 4'h8;
        else if (_GEN_3)
          bitCntReg <= bitCntReg - 4'h1;
      end
      readyReg <=
        ~(io_out_ready & io_out_valid_0)
        & (~_GEN_4 & _GEN_2 & _GEN_1 & ~(|bitCntReg) | readyReg);
      stateReg <= _GEN_6[stateReg];
      if (_GEN_1 & cntReg)
        cntReg <= cntReg - 1'h1;
    end
  end // always @(posedge)
  assign io_out_valid = io_out_valid_0;
  assign io_out_bits = shiftReg;
endmodule

