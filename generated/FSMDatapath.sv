// Generated by CIRCT firtool-1.62.0
module FSM(
  input  clock,
         reset,
         io_prevValid,
         io_nextReady,
         io_countReady,
  output io_prevReady,
         io_nextValid,
         io_loadData
);

  reg  [1:0] stateReg;
  wire       io_prevReady_0 = stateReg == 2'h0;
  wire       _GEN = stateReg == 2'h1;
  wire       _GEN_0 = stateReg == 2'h2;
  always @(posedge clock) begin
    if (reset)
      stateReg <= 2'h0;
    else if (io_prevReady_0) begin
      if (io_prevValid)
        stateReg <= 2'h1;
    end
    else if (_GEN) begin
      if (io_countReady)
        stateReg <= 2'h2;
    end
    else if (_GEN_0 & io_nextReady)
      stateReg <= 2'h0;
  end // always @(posedge)
  assign io_prevReady = io_prevReady_0;
  assign io_nextValid = ~(io_prevReady_0 | _GEN) & _GEN_0;
  assign io_loadData = io_prevReady_0 | ~_GEN & ~_GEN_0;
endmodule

module Datapath(
  input        clock,
               reset,
               io_loadData,
  input  [7:0] io_inData,
  output       io_countReady,
  output [3:0] io_outData
);

  reg [7:0] shifterReg;
  reg [3:0] popCountReg;
  reg [3:0] counterReg;
  always @(posedge clock) begin
    if (reset) begin
      shifterReg <= 8'h0;
      popCountReg <= 4'h0;
      counterReg <= 4'h8;
    end
    else if (io_loadData) begin
      shifterReg <= io_inData;
      popCountReg <= 4'h0;
      counterReg <= 4'h8;
    end
    else begin
      shifterReg <= {1'h0, shifterReg[7:1]};
      popCountReg <= popCountReg + {3'h0, shifterReg[0]};
      if (|counterReg)
        counterReg <= counterReg - 4'h1;
    end
  end // always @(posedge)
  assign io_countReady = ~(|counterReg);
  assign io_outData = popCountReg;
endmodule

module FSMDatapath(
  input        clock,
               reset,
               io_prevValid,
               io_nextReady,
  input  [7:0] io_inData,
  output       io_prevReady,
               io_nextValid,
  output [3:0] io_outData
);

  wire _datapath_io_countReady;
  wire _fsm_io_loadData;
  FSM fsm (
    .clock         (clock),
    .reset         (reset),
    .io_prevValid  (io_prevValid),
    .io_nextReady  (io_nextReady),
    .io_countReady (_datapath_io_countReady),
    .io_prevReady  (io_prevReady),
    .io_nextValid  (io_nextValid),
    .io_loadData   (_fsm_io_loadData)
  );
  Datapath datapath (
    .clock         (clock),
    .reset         (reset),
    .io_loadData   (_fsm_io_loadData),
    .io_inData     (io_inData),
    .io_countReady (_datapath_io_countReady),
    .io_outData    (io_outData)
  );
endmodule

