// Generated by CIRCT firtool-1.62.0
module ROM(
  output [7:0] io_ir,
               io_data
);

  assign io_ir = 8'h0;
  assign io_data = 8'h0;
endmodule

module MAU(
  input  [7:0]  io_data,
                io_x,
                io_y,
  input         io_highAddr,
                io_lowAddr,
  output [15:0] io_memAddr
);

  assign io_memAddr = {io_highAddr ? io_y : 8'h0, io_lowAddr ? io_x : io_data};
endmodule

// VCS coverage exclude_file
module ram_65536x8(
  input  [15:0] R0_addr,
  input         R0_en,
                R0_clk,
  output [7:0]  R0_data,
  input  [15:0] W0_addr,
  input         W0_en,
                W0_clk,
  input  [7:0]  W0_data
);

  reg [7:0] Memory[0:65535];
  always @(posedge W0_clk) begin
    if (W0_en & 1'h1)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 8'bx;
endmodule

module RAM(
  input         clock,
  input  [7:0]  io_in,
  input  [15:0] io_addr,
  input         io_write,
  output [7:0]  io_out
);

  ram_65536x8 ram_ext (
    .R0_addr (io_addr),
    .R0_en   (1'h1),
    .R0_clk  (~clock),
    .R0_data (io_out),
    .W0_addr (io_addr),
    .W0_en   (io_write),
    .W0_clk  (~clock),
    .W0_data (io_in)
  );
endmodule

module ALU(
  input  [7:0] io_a,
               io_b,
  input  [2:0] io_func,
  output [7:0] io_sum,
  output       io_equal
);

  wire [7:0][7:0] _GEN =
    {{io_a - 8'h1},
     {io_a},
     {io_a - io_b},
     {io_a + io_b},
     {io_a ^ io_b},
     {io_a | io_b},
     {io_a & io_b},
     {io_b}};
  assign io_sum = _GEN[io_func];
  assign io_equal = io_a == io_b;
endmodule

module IOU(
  input  [7:0] io_in,
  input        io_inputEnCtr,
               io_outputEnCtr,
  output [3:0] io_inputEnable,
               io_outputWrite
);

  assign io_inputEnable = io_inputEnCtr ? io_in[3:0] : 4'h0;
  assign io_outputWrite = io_outputEnCtr ? io_in[7:4] : 4'h0;
endmodule

module counter8bit(
  input        clock,
               reset,
  input  [7:0] io_in,
  input        io_write,
               io_inc,
  output [7:0] io_out
);

  wire       negClock = ~clock;
  reg  [7:0] negReg;
  always @(posedge negClock) begin
    if (reset)
      negReg <= 8'h0;
    else if (io_write)
      negReg <= io_in;
    else if (io_inc)
      negReg <= negReg + 8'h1;
  end // always @(posedge)
  assign io_out = negReg;
endmodule

module Register8bit(
  input        clock,
               reset,
  input  [7:0] io_in,
  input        io_write,
  output [7:0] io_out
);

  wire       negClock = ~clock;
  reg  [7:0] negReg;
  always @(posedge negClock) begin
    if (reset)
      negReg <= 8'h0;
    else if (io_write)
      negReg <= io_in;
  end // always @(posedge)
  assign io_out = negReg;
endmodule

module Shifter8bit(
  input        clock,
               reset,
               io_pallelClock,
  output [7:0] io_out
);

  reg  [7:0] outputReg;
  wire       negClock = ~clock;
  reg  [7:0] shiftReg;
  always @(posedge clock) begin
    if (reset)
      outputReg <= 8'h0;
    else if (io_pallelClock)
      outputReg <= shiftReg;
  end // always @(posedge)
  always @(posedge negClock) begin
    if (reset)
      shiftReg <= 8'h0;
    else
      shiftReg <= {shiftReg[6:0], 1'h0};
  end // always @(posedge)
  assign io_out = outputReg;
endmodule

module DataPath(
  input        clock,
               reset,
  input  [1:0] io_dBusAccess,
               io_ramAddrSel,
  input        io_ramWrite,
               io_xWrite,
               io_xInc,
               io_yWrite,
               io_accWrite,
               io_iocWrite,
               io_inputEnble,
               io_outputEnble,
               io_ioCtlEnble,
               io_pcHighWrite,
               io_pcLowWrite,
  input  [2:0] io_aluFuct,
  output       io_acc7,
               io_a_eq_b,
  output [7:0] io_opCode,
               io_output1
);

  wire [7:0]      inputBus;
  wire [7:0]      _gamepad_in_io_out;
  wire [7:0]      _keyboard_in_io_out;
  wire [7:0]      _ioc_io_out;
  wire [7:0]      _acc_io_out;
  wire [7:0]      _y_io_out;
  wire [7:0]      _x_io_out;
  wire [3:0]      _iou_io_inputEnable;
  wire [3:0]      _iou_io_outputWrite;
  wire [7:0]      _alu_io_sum;
  wire [7:0]      _ram_io_out;
  wire [15:0]     _mau_io_memAddr;
  wire [7:0]      _rom_io_data;
  wire [3:0][7:0] _GEN = {{inputBus}, {_acc_io_out}, {_ram_io_out}, {_rom_io_data}};
  assign inputBus =
    _iou_io_inputEnable == 4'h1
      ? _gamepad_in_io_out
      : _iou_io_inputEnable == 4'h2 ? _keyboard_in_io_out : 8'h0;
  ROM rom (
    .io_ir   (io_opCode),
    .io_data (_rom_io_data)
  );
  MAU mau (
    .io_data     (_rom_io_data),
    .io_x        (_x_io_out),
    .io_y        (_y_io_out),
    .io_highAddr (io_ramAddrSel[1]),
    .io_lowAddr  (io_ramAddrSel[0]),
    .io_memAddr  (_mau_io_memAddr)
  );
  RAM ram (
    .clock    (clock),
    .io_in    (_GEN[io_dBusAccess]),
    .io_addr  (_mau_io_memAddr),
    .io_write (io_ramWrite),
    .io_out   (_ram_io_out)
  );
  ALU alu (
    .io_a     (_acc_io_out),
    .io_b     (_GEN[io_dBusAccess]),
    .io_func  (io_aluFuct),
    .io_sum   (_alu_io_sum),
    .io_equal (io_a_eq_b)
  );
  IOU iou (
    .io_in          (_ioc_io_out),
    .io_inputEnCtr  (io_inputEnble),
    .io_outputEnCtr (io_outputEnble),
    .io_inputEnable (_iou_io_inputEnable),
    .io_outputWrite (_iou_io_outputWrite)
  );
  counter8bit x (
    .clock    (clock),
    .reset    (reset),
    .io_in    (_alu_io_sum),
    .io_write (io_xWrite),
    .io_inc   (io_xInc),
    .io_out   (_x_io_out)
  );
  Register8bit y (
    .clock    (clock),
    .reset    (reset),
    .io_in    (_alu_io_sum),
    .io_write (io_yWrite),
    .io_out   (_y_io_out)
  );
  Register8bit acc (
    .clock    (clock),
    .reset    (reset),
    .io_in    (_alu_io_sum),
    .io_write (io_accWrite),
    .io_out   (_acc_io_out)
  );
  Register8bit ioc (
    .clock    (clock),
    .reset    (reset),
    .io_in    (_alu_io_sum),
    .io_write (io_iocWrite),
    .io_out   (_ioc_io_out)
  );
  Register8bit out (
    .clock    (clock),
    .reset    (reset),
    .io_in    (_alu_io_sum),
    .io_write (_iou_io_outputWrite[0]),
    .io_out   (io_output1)
  );
  Shifter8bit keyboard_in (
    .clock          (clock),
    .reset          (reset),
    .io_pallelClock (_iou_io_inputEnable[1]),
    .io_out         (_keyboard_in_io_out)
  );
  Shifter8bit gamepad_in (
    .clock          (clock),
    .reset          (reset),
    .io_pallelClock (_iou_io_inputEnable[0]),
    .io_out         (_gamepad_in_io_out)
  );
  assign io_acc7 = _acc_io_out[7];
endmodule

