// Generated by CIRCT firtool-1.62.0
// VCS coverage exclude_file
module mem_8x8(
  input  [2:0] R0_addr,
  input        R0_en,
               R0_clk,
  output [7:0] R0_data,
  input  [2:0] R1_addr,
  input        R1_en,
               R1_clk,
  output [7:0] R1_data,
  input  [2:0] W0_addr,
  input        W0_en,
               W0_clk,
  input  [7:0] W0_data,
  input  [2:0] W1_addr,
  input        W1_en,
               W1_clk,
  input  [7:0] W1_data
);

  reg [7:0] Memory[0:7];
  reg       _R0_en_d0;
  reg [2:0] _R0_addr_d0;
  always @(posedge R0_clk) begin
    _R0_en_d0 <= R0_en;
    _R0_addr_d0 <= R0_addr;
  end // always @(posedge)
  reg       _R1_en_d0;
  reg [2:0] _R1_addr_d0;
  always @(posedge R1_clk) begin
    _R1_en_d0 <= R1_en;
    _R1_addr_d0 <= R1_addr;
  end // always @(posedge)
  always @(posedge W0_clk) begin
    if (W0_en & 1'h1)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  always @(posedge W1_clk) begin
    if (W1_en & 1'h1)
      Memory[W1_addr] <= W1_data;
  end // always @(posedge)
  assign R0_data = _R0_en_d0 ? Memory[_R0_addr_d0] : 8'bx;
  assign R1_data = _R1_en_d0 ? Memory[_R1_addr_d0] : 8'bx;
endmodule

module MultiClockMemory(
  input        clock,
               reset,
               io_portsVec_0_clock,
               io_portsVec_0_enable,
               io_portsVec_0_writeEn,
  input  [2:0] io_portsVec_0_address,
  input  [7:0] io_portsVec_0_dataIn,
  output [7:0] io_portsVec_0_dataOut,
  input        io_portsVec_1_clock,
               io_portsVec_1_enable,
               io_portsVec_1_writeEn,
  input  [2:0] io_portsVec_1_address,
  input  [7:0] io_portsVec_1_dataIn,
  output [7:0] io_portsVec_1_dataOut
);

  wire [7:0] _mem_ext_R0_data;
  wire [7:0] _mem_ext_R1_data;
  mem_8x8 mem_ext (
    .R0_addr (io_portsVec_1_address),
    .R0_en   (io_portsVec_1_enable),
    .R0_clk  (io_portsVec_1_clock),
    .R0_data (_mem_ext_R0_data),
    .R1_addr (io_portsVec_0_address),
    .R1_en   (io_portsVec_0_enable),
    .R1_clk  (io_portsVec_0_clock),
    .R1_data (_mem_ext_R1_data),
    .W0_addr (io_portsVec_1_address),
    .W0_en   (io_portsVec_1_enable & io_portsVec_1_writeEn),
    .W0_clk  (io_portsVec_1_clock),
    .W0_data (io_portsVec_1_dataIn),
    .W1_addr (io_portsVec_0_address),
    .W1_en   (io_portsVec_0_enable & io_portsVec_0_writeEn),
    .W1_clk  (io_portsVec_0_clock),
    .W1_data (io_portsVec_0_dataIn)
  );
  assign io_portsVec_0_dataOut = io_portsVec_0_enable ? _mem_ext_R1_data : 8'h0;
  assign io_portsVec_1_dataOut = io_portsVec_1_enable ? _mem_ext_R0_data : 8'h0;
endmodule

