// Generated by CIRCT firtool-1.62.0
module Adder(
  input  [3:0] io_b,
  output [3:0] io_sum
);

  assign io_sum = io_b + 4'h1;
endmodule

module Register(
  input        clock,
               reset,
  input  [3:0] io_regIn,
  output [3:0] io_regOut
);

  reg [3:0] reg_0;
  always @(posedge clock) begin
    if (reset)
      reg_0 <= 4'h0;
    else
      reg_0 <= io_regIn;
  end // always @(posedge)
  assign io_regOut = reg_0;
endmodule

module Counter(
  input        clock,
               reset,
  output [3:0] io_count
);

  wire [3:0] _register_io_regOut;
  wire [3:0] _adder_io_sum;
  Adder adder (
    .io_b   (_register_io_regOut),
    .io_sum (_adder_io_sum)
  );
  Register register (
    .clock     (clock),
    .reset     (reset),
    .io_regIn  (_adder_io_sum == 4'hA ? 4'h0 : _adder_io_sum),
    .io_regOut (_register_io_regOut)
  );
  assign io_count = _register_io_regOut;
endmodule

