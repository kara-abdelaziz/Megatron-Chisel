// Generated by CIRCT firtool-1.62.0
module BubbleBufferFIFO(
  input        clock,
               reset,
  input  [7:0] io_dataIn,
  input        io_write,
               io_ready,
  output [7:0] io_dataOut,
  output       io_full,
               io_empty
);

  reg  [7:0] stackVec_0;
  reg  [7:0] stackVec_1;
  reg  [7:0] stackVec_2;
  reg  [7:0] stackVec_3;
  reg  [7:0] stackVec_4;
  reg  [7:0] stackVec_5;
  reg  [7:0] stackVec_6;
  reg  [7:0] stackVec_7;
  reg  [7:0] stackVec_8;
  reg  [7:0] stackVec_9;
  reg  [3:0] tailReg;
  wire       io_full_0 = tailReg == 4'hA;
  always @(posedge clock) begin
    automatic logic _GEN;
    automatic logic _GEN_0;
    automatic logic _GEN_1;
    automatic logic _GEN_2;
    _GEN = io_ready & io_write;
    _GEN_0 = tailReg == 4'h9;
    _GEN_1 = io_ready & (|tailReg);
    _GEN_2 = io_write & ~io_full_0;
    if (_GEN | _GEN_1) begin
      stackVec_0 <= stackVec_1;
      stackVec_1 <= stackVec_2;
      stackVec_2 <= stackVec_3;
      stackVec_3 <= stackVec_4;
      stackVec_4 <= stackVec_5;
      stackVec_5 <= stackVec_6;
      stackVec_6 <= stackVec_7;
      stackVec_7 <= stackVec_8;
      stackVec_8 <= stackVec_9;
    end
    else begin
      automatic logic _GEN_3;
      automatic logic _GEN_4;
      automatic logic _GEN_5;
      automatic logic _GEN_6;
      automatic logic _GEN_7;
      automatic logic _GEN_8;
      automatic logic _GEN_9;
      automatic logic _GEN_10;
      _GEN_3 = tailReg == 4'h1;
      _GEN_4 = tailReg == 4'h2;
      _GEN_5 = tailReg == 4'h3;
      _GEN_6 = tailReg == 4'h4;
      _GEN_7 = tailReg == 4'h5;
      _GEN_8 = tailReg == 4'h6;
      _GEN_9 = tailReg == 4'h7;
      _GEN_10 = tailReg == 4'h8;
      if (_GEN ? (|tailReg) : _GEN_1 | ~(_GEN_2 & ~(|tailReg))) begin
      end
      else
        stackVec_0 <= io_dataIn;
      if (_GEN) begin
        if (_GEN_3)
          stackVec_1 <= io_dataIn;
        if (_GEN_4)
          stackVec_2 <= io_dataIn;
        if (_GEN_5)
          stackVec_3 <= io_dataIn;
        if (_GEN_6)
          stackVec_4 <= io_dataIn;
        if (_GEN_7)
          stackVec_5 <= io_dataIn;
        if (_GEN_8)
          stackVec_6 <= io_dataIn;
        if (_GEN_9)
          stackVec_7 <= io_dataIn;
        if (_GEN_10)
          stackVec_8 <= io_dataIn;
      end
      else begin
        if (_GEN_1 | ~(_GEN_2 & _GEN_3)) begin
        end
        else
          stackVec_1 <= io_dataIn;
        if (_GEN_1 | ~(_GEN_2 & _GEN_4)) begin
        end
        else
          stackVec_2 <= io_dataIn;
        if (_GEN_1 | ~(_GEN_2 & _GEN_5)) begin
        end
        else
          stackVec_3 <= io_dataIn;
        if (_GEN_1 | ~(_GEN_2 & _GEN_6)) begin
        end
        else
          stackVec_4 <= io_dataIn;
        if (_GEN_1 | ~(_GEN_2 & _GEN_7)) begin
        end
        else
          stackVec_5 <= io_dataIn;
        if (_GEN_1 | ~(_GEN_2 & _GEN_8)) begin
        end
        else
          stackVec_6 <= io_dataIn;
        if (_GEN_1 | ~(_GEN_2 & _GEN_9)) begin
        end
        else
          stackVec_7 <= io_dataIn;
        if (_GEN_1 | ~(_GEN_2 & _GEN_10)) begin
        end
        else
          stackVec_8 <= io_dataIn;
      end
    end
    if (_GEN) begin
      if (_GEN_0)
        stackVec_9 <= io_dataIn;
    end
    else if (_GEN_1 | ~(_GEN_2 & _GEN_0)) begin
    end
    else
      stackVec_9 <= io_dataIn;
    if (reset)
      tailReg <= 4'h0;
    else if (~_GEN) begin
      if (_GEN_1)
        tailReg <= tailReg - 4'h1;
      else if (_GEN_2)
        tailReg <= tailReg + 4'h1;
    end
  end // always @(posedge)
  assign io_dataOut = stackVec_0;
  assign io_full = io_full_0;
  assign io_empty = ~(|tailReg);
endmodule

