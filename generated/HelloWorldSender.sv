// Generated by CIRCT firtool-1.62.0
module OneCellBuffer(
  input        clock,
               reset,
  output       io_in_ready,
  input        io_in_valid,
  input  [7:0] io_in_bits,
  input        io_out_ready,
  output       io_out_valid,
  output [7:0] io_out_bits
);

  reg [7:0] dataReg;
  reg       stateReg;
  always @(posedge clock) begin
    if (~stateReg & io_in_valid)
      dataReg <= io_in_bits;
    if (reset)
      stateReg <= 1'h0;
    else if (stateReg)
      stateReg <= ~(stateReg & io_out_ready) & stateReg;
    else
      stateReg <= io_in_valid | stateReg;
  end // always @(posedge)
  assign io_in_ready = ~stateReg;
  assign io_out_valid = stateReg;
  assign io_out_bits = dataReg;
endmodule

module TX(
  input        clock,
               reset,
  output       io_in_ready,
  input        io_in_valid,
  input  [7:0] io_in_bits,
  output       io_txPin
);

  reg  [19:0] tickReg;
  reg  [10:0] shiftReg;
  reg  [3:0]  bitCntReg;
  wire        _io_in_ready_T = bitCntReg == 4'h0;
  wire        _io_in_ready_T_1 = tickReg == 20'h0;
  always @(posedge clock) begin
    if (reset) begin
      tickReg <= 20'h0;
      shiftReg <= 11'h7FF;
      bitCntReg <= 4'h0;
    end
    else if (_io_in_ready_T_1) begin
      tickReg <= 20'h1457;
      if (_io_in_ready_T) begin
        shiftReg <= io_in_valid ? {2'h3, io_in_bits, 1'h0} : 11'h7FF;
        if (io_in_valid)
          bitCntReg <= 4'hA;
      end
      else begin
        shiftReg <= {1'h1, shiftReg[10:1]};
        bitCntReg <= bitCntReg - 4'h1;
      end
    end
    else
      tickReg <= tickReg - 20'h1;
  end // always @(posedge)
  assign io_in_ready = _io_in_ready_T & _io_in_ready_T_1;
  assign io_txPin = shiftReg[0];
endmodule

module BuffredTX(
  input        clock,
               reset,
  output       io_in_ready,
  input        io_in_valid,
  input  [7:0] io_in_bits,
  output       io_txPin
);

  wire       _tx_io_in_ready;
  wire       _buffer_io_out_valid;
  wire [7:0] _buffer_io_out_bits;
  OneCellBuffer buffer (
    .clock        (clock),
    .reset        (reset),
    .io_in_ready  (io_in_ready),
    .io_in_valid  (io_in_valid),
    .io_in_bits   (io_in_bits),
    .io_out_ready (_tx_io_in_ready),
    .io_out_valid (_buffer_io_out_valid),
    .io_out_bits  (_buffer_io_out_bits)
  );
  TX tx (
    .clock       (clock),
    .reset       (reset),
    .io_in_ready (_tx_io_in_ready),
    .io_in_valid (_buffer_io_out_valid),
    .io_in_bits  (_buffer_io_out_bits),
    .io_txPin    (io_txPin)
  );
endmodule

module HelloWorldSender(
  input  clock,
         reset,
  output io_txPin
);

  wire             _buffredTX_io_in_ready;
  wire [15:0][6:0] _GEN =
    '{7'h48,
      7'h48,
      7'h48,
      7'h21,
      7'h20,
      7'h64,
      7'h6C,
      7'h72,
      7'h6F,
      7'h57,
      7'h20,
      7'h6F,
      7'h6C,
      7'h6C,
      7'h65,
      7'h48};
  reg  [3:0]       i;
  wire             _GEN_0 = (|i) & _buffredTX_io_in_ready;
  always @(posedge clock) begin
    if (reset)
      i <= 4'hD;
    else if (_GEN_0)
      i <= i - 4'h1;
  end // always @(posedge)
  BuffredTX buffredTX (
    .clock       (clock),
    .reset       (reset),
    .io_in_ready (_buffredTX_io_in_ready),
    .io_in_valid ((|i) & _buffredTX_io_in_ready),
    .io_in_bits  (_GEN_0 ? {1'h0, _GEN[4'hD - i]} : 8'h0),
    .io_txPin    (io_txPin)
  );
endmodule

