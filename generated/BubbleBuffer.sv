// Generated by CIRCT firtool-1.62.0
module BubbleBuffer(
  input        clock,
               reset,
  input  [7:0] io_dataIn,
  input        io_write,
               io_ready,
  output [7:0] io_dataOut,
  output       io_full,
               io_empty
);

  reg  [7:0] stackVec_0;
  reg  [7:0] stackVec_1;
  reg  [7:0] stackVec_2;

  reg  [7:0] stackVec_3;
  reg  [7:0] stackVec_4;
  reg  [7:0] stackVec_5;
  reg  [7:0] stackVec_6;
  reg  [7:0] stackVec_7;
  reg  [7:0] stackVec_8;
  reg  [7:0] stackVec_9;
  reg  [3:0] tailReg;
  wire       io_full_0 = tailReg == 4'hB;
  always @(posedge clock) begin
    automatic logic enbVec_8;
    automatic logic _GEN;
    enbVec_8 = io_ready & (|tailReg);
    _GEN = io_write & ~io_full_0;
    if (enbVec_8) begin
      stackVec_0 <= stackVec_1;
      stackVec_1 <= stackVec_2;
      stackVec_2 <= stackVec_3;
      stackVec_3 <= stackVec_4;
      stackVec_4 <= stackVec_5;
      stackVec_5 <= stackVec_6;
      stackVec_6 <= stackVec_7;
      stackVec_7 <= stackVec_8;
      stackVec_8 <= stackVec_9;
    end
    else begin
      if (_GEN & ~(|tailReg))
        stackVec_0 <= io_dataIn;
      if (_GEN & tailReg == 4'h1)
        stackVec_1 <= io_dataIn;
      if (_GEN & tailReg == 4'h2)
        stackVec_2 <= io_dataIn;
      if (_GEN & tailReg == 4'h3)
        stackVec_3 <= io_dataIn;
      if (_GEN & tailReg == 4'h4)
        stackVec_4 <= io_dataIn;
      if (_GEN & tailReg == 4'h5)
        stackVec_5 <= io_dataIn;
      if (_GEN & tailReg == 4'h6)
        stackVec_6 <= io_dataIn;
      if (_GEN & tailReg == 4'h7)
        stackVec_7 <= io_dataIn;
      if (_GEN & tailReg == 4'h8)
        stackVec_8 <= io_dataIn;
    end
    if (_GEN & tailReg == 4'h9)
      stackVec_9 <= io_dataIn;
    if (reset)
      tailReg <= 4'h0;
    else if (_GEN)
      tailReg <= tailReg + 4'h1;
    else if (enbVec_8)
      tailReg <= tailReg - 4'h1;
  end // always @(posedge)
  assign io_dataOut = stackVec_0;
  assign io_full = io_full_0;
  assign io_empty = ~(|tailReg);
endmodule

