// Generated by CIRCT firtool-1.62.0
module DoubleBuffer(
  input        clock,
               reset,
  output       io_in_ready,
  input        io_in_valid,
  input  [7:0] io_in_bits,
  input        io_out_ready,
  output       io_out_valid,
  output [7:0] io_out_bits
);

  reg  [1:0] stateReg;
  reg  [7:0] dataStage1Reg;
  reg  [7:0] dataStage2Reg;
  wire       _io_in_ready_T = stateReg == 2'h1;
  always @(posedge clock) begin
    automatic logic _GEN;
    automatic logic _GEN_0;
    automatic logic _GEN_1;
    _GEN = stateReg == 2'h1;
    _GEN_0 = io_in_valid & io_out_ready;
    _GEN_1 = stateReg == 2'h2 & io_out_ready;
    if (reset)
      stateReg <= 2'h0;
    else if (|stateReg) begin
      if (_GEN) begin
        if (~_GEN_0) begin
          if (io_in_valid)
            stateReg <= 2'h2;
          else if (io_out_ready)
            stateReg <= 2'h0;
        end
      end
      else if (_GEN_1)
        stateReg <= 2'h1;
    end
    else if (io_in_valid)
      stateReg <= 2'h1;
    if (|stateReg) begin
      if (_GEN) begin
        if (_GEN_0)
          dataStage1Reg <= io_in_bits;
      end
      else if (_GEN_1)
        dataStage1Reg <= dataStage2Reg;
    end
    else if (io_in_valid)
      dataStage1Reg <= io_in_bits;
    if (~(|stateReg) | ~_GEN | _GEN_0 | ~io_in_valid) begin
    end
    else
      dataStage2Reg <= io_in_bits;
  end // always @(posedge)
  assign io_in_ready = _io_in_ready_T | ~(|stateReg);
  assign io_out_valid = _io_in_ready_T | stateReg == 2'h2;
  assign io_out_bits = dataStage1Reg;
endmodule

module BubbleFIFO(
  input        clock,
               reset,
  output       io_in_ready,
  input        io_in_valid,
  input  [7:0] io_in_bits,
  input        io_out_ready,
  output       io_out_valid,
  output [7:0] io_out_bits
);

  wire       _DoubleBuffer_3_io_in_ready;
  wire       _DoubleBuffer_2_io_in_ready;
  wire       _DoubleBuffer_2_io_out_valid;
  wire [7:0] _DoubleBuffer_2_io_out_bits;
  wire       _DoubleBuffer_1_io_in_ready;
  wire       _DoubleBuffer_1_io_out_valid;
  wire [7:0] _DoubleBuffer_1_io_out_bits;
  wire       _DoubleBuffer_io_out_valid;
  wire [7:0] _DoubleBuffer_io_out_bits;
  DoubleBuffer DoubleBuffer (
    .clock        (clock),
    .reset        (reset),
    .io_in_ready  (io_in_ready),
    .io_in_valid  (io_in_valid),
    .io_in_bits   (io_in_bits),
    .io_out_ready (_DoubleBuffer_1_io_in_ready),
    .io_out_valid (_DoubleBuffer_io_out_valid),
    .io_out_bits  (_DoubleBuffer_io_out_bits)
  );
  DoubleBuffer DoubleBuffer_1 (
    .clock        (clock),
    .reset        (reset),
    .io_in_ready  (_DoubleBuffer_1_io_in_ready),
    .io_in_valid  (_DoubleBuffer_io_out_valid),
    .io_in_bits   (_DoubleBuffer_io_out_bits),
    .io_out_ready (_DoubleBuffer_2_io_in_ready),
    .io_out_valid (_DoubleBuffer_1_io_out_valid),
    .io_out_bits  (_DoubleBuffer_1_io_out_bits)
  );
  DoubleBuffer DoubleBuffer_2 (
    .clock        (clock),
    .reset        (reset),
    .io_in_ready  (_DoubleBuffer_2_io_in_ready),
    .io_in_valid  (_DoubleBuffer_1_io_out_valid),
    .io_in_bits   (_DoubleBuffer_1_io_out_bits),
    .io_out_ready (_DoubleBuffer_3_io_in_ready),
    .io_out_valid (_DoubleBuffer_2_io_out_valid),
    .io_out_bits  (_DoubleBuffer_2_io_out_bits)
  );
  DoubleBuffer DoubleBuffer_3 (
    .clock        (clock),
    .reset        (reset),
    .io_in_ready  (_DoubleBuffer_3_io_in_ready),
    .io_in_valid  (_DoubleBuffer_2_io_out_valid),
    .io_in_bits   (_DoubleBuffer_2_io_out_bits),
    .io_out_ready (io_out_ready),
    .io_out_valid (io_out_valid),
    .io_out_bits  (io_out_bits)
  );
endmodule

